ext {
    shadow_dep = [group: "com.github.johnrengelman", name: "shadow", version: "8.+"]  // mantém a dependência do Shadow, caso necessário
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath project.hasProperty('shadow_dep') ? shadow_dep : ["group": "com.github.johnrengelman", "name": "shadow", "version": "8.+"]
        classpath "com.modrinth.minotaur:Minotaur:2.+"
    }
}

apply plugin: com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
apply plugin: com.matthewprenger.cursegradle.CurseGradlePlugin

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        client {
            vmArgs "-Dmixin.debug.export=true"
        }
    }
}

ext {
    mod_meta = ["version": project.version, "homepage": curse_page_fabric,
                "mcversion": minecraft_version, "fabric_version": fabric_version]
}

configurations {
    common
    shadowCommon // Não use o Shadow do plugin do Shadow porque não queremos que o IDEA indexe isso.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand mod_meta
    }
    exclude '.cache'
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

jar {
    // Modifiquei a tarefa jar para gerar o JAR localmente
    archiveBaseName.set(project.name)
    archiveVersion.set(project.version)
    archiveClassifier.set("") // Sem classificadores adicionais
    destinationDirectory.set(file("${buildDir}/libs")) // Coloca o JAR gerado em build/libs
}

tasks.register("buildJar") {
    dependsOn jar
    doLast {
        println "JAR gerado em: ${buildDir}/libs/${jar.archiveFileName}"
    }
}

tasks.getByName("curseforge").mustRunAfter build
tasks.getByName("modrinth").mustRunAfter build

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                classifier null
                builtBy jar
            }
        }
    }

    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.gitlab.token") ?: System.getenv("GPR_GITLAB_TOKEN")
            }
        }
    }
}
