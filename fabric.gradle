ext {
    shadow_dep = [group: "com.github.johnrengelman", name: "shadow", version: "8.+"]
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath project.hasProperty('shadow_dep') ? shadow_dep : ["group": "com.github.johnrengelman", "name": "shadow", "version": "8."]
        classpath "com.modrinth.minotaur:Minotaur:2.+"
    }
}

apply plugin: com.modrinth.minotaur.Minotaur
apply plugin: com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
apply plugin: com.matthewprenger.cursegradle.CurseGradlePlugin
apply from: "https://raw.githubusercontent.com/Flemmli97/GradleScripts/mc-architectury-fabric-neoforge/changelog.gradle"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        client {
            vmArgs "-Dmixin.debug.export=true"
        }
    }
}

ext {
    mod_meta = ["version": project.version, "homepage": curse_page_fabric,
                "mcversion": minecraft_version, "fabric_version": fabric_version]
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand mod_meta
    }
    exclude '.cache'
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    archiveClassifier.set("fabric-sources")
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// Removido a configuração de publicação no CurseForge, Modrinth e Maven

// Não há necessidade de tarefas específicas para "curseforge" e "modrinth" já que não estamos publicando
// tasks.getByName("curseforge").mustRunAfter build
// tasks.getByName("modrinth").mustRunAfter build
